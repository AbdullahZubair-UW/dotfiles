# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
#TESTINGS

# General Paths
export ZSH="$HOME/.oh-my-zsh"
### EXPORT
export TERM="xterm-256color"                      # getting proper colors
export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..)"
export EDITOR="nvim"              # $EDITOR use Emacs in terminal

export PATH=$HOME/.emacs.d/bin:$PATH
export PATH=$HOME/.local/bin:$PATH
export PATH=$HOME/.cargo/bin:$PATH
export PATH="$PATH:'yarn global bin'"

# For Dotfiles bare stuff.
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'


#################### OH MY ZSH STUFF  ################################
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

plugins=(
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
  copyfile
  cp
  ubuntu
  copypath
  copybuffer
  fd
  dirhistory
  rsync
  z                   # Shift around recent dirs using regex
  fancy-ctrl-z
  gitignore           # Searches for good gitignore files to use.
  # history             # Prints your command history.
  last-working-dir    # Loads a new shell with last working dir.
  man                 # Append man command to previous command.
  perms               # Adds perms to file or dir.
  pj                  # Dir jumping
  scd                 # Dir jumping (2)
)

PROJECT_PATHS=(
  ~/uwaterloo/UW-4B/"PMATH 467"
  ~/uwaterloo/UW-4B/"PMATH 351"
  ~/uwaterloo/Math
)

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# For a full list of active aliases, run `alias`.
#
# Example aliases

# Git
alias commit='git commit -m'
alias fetch='git fetch'
alias pull='git pull origin'
alias push='git push origin'
alias status='git status'  # 'status' is protected name so using 'stat' instead
alias lg='lazygit'  # 'status' is protected name so using 'stat' instead

# Changing "ls" to "exa"
alias ls='lsd -al --color=always --group-dirs first' # my preferred listing
alias la='lsd -a --color=always --group-dirs'  # all files and dirs
alias ll='lsd -l --color=always --group-dirs'  # long format
alias lt='lsd -aT --color=always --group-dirs' # tree listing
alias l.='lsd -a | egrep "^\."'

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
# alias rm='rm -i'

# vim and emacs
alias em="/usr/bin/emacs -nw"
alias emacs="emacsclient -c -a 'emacs'"


#FZF - Fuzzy Finder 
. ~/z.sh

xset r rate 140 110
xmodmap ~/.Xmodmap

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

LS_COLORS='rs=0:di=01;32:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:';
export LS_COLORS

#Functions
lfcd () {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1 && trap - HUP INT QUIT TERM PWR EXIT' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' '^ulfcd\n'

#--- Makes an assignment directory with preset question files.
mkA(){
  mkdir -p -- "$1"
  cd "$1"
  touch $(printf "q%d.tex " {1..$2}) 
  cp ~/Templates/HWpreamble.sty .
}

#--- Navigating
j() {
    [ $# -gt 0 ] && z "$*" && return
    cd "$(z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}

#--- Quickly opening pdf's in Zathura
p() {
    [ $# -gt 0 ] && fzf && return
    zathura "$(fzf)"
}
bindkey -s "^p" 'p^M'

#--- Backup function that backs up files when Samsung SSD is plugged in.
backup-SSD() {
  rsync-synchronize ~/uwaterloo/ /media/az/SamsungSSD/UWaterloo-Backup/
  rsync-synchronize ~/.config/ /media/az/SamsungSSD/Config-Backup/
  rsync-synchronize ~/dotfiles/ /media/az/SamsungSSD/dotfiles-Backup/
  rsync-synchronize ~/teaching/ /media/az/SamsungSSD/Teaching-Backup/
  rsync-synchronize ~/Website/ /media/az/SamsungSSD/Website-Backup/
  rsync-synchronize ~/install-client/ /media/az/SamsungSSD/Install-Client-Backup/
}

#Testing backup funtion another

#--- Print function that first asks for cropping and then prints to letter.
printfile() {
  echo "Do you want to crop the file?"
  select yn in "Yes" "No"; do
      case $yn in
          Yes ) pdfcrop "$1" cropped-file.pdf; 
																echo "How many copies?: "
																read copies
																echo "Proceeding to print ${copies} copies...."
																lpr -P Brother_HL-L2390DW -# "${copies}" -o fit-to-page -o media=letter -o print-quality=5 cropped-file.pdf
																rm cropped-file.pdf
																break;;
          No ) echo "How many copies?: ";
															read copies;
  													echo "Proceeding to print ${copies} copies....";
  													lpr -P Brother_HL-L2390DW -# "${copies}" -o fit-to-page -o media=letter -o print-quality=5 "$1";
															break;;
      esac
  done
}

#--- Updates my zshrc-file.tx when changes occur
update-zshrc(){
  cat ~/.zshrc > ~/zshrc-file.txt
}

#--- Z-command for vim
   # Custom fuzzy completion for "vim" command e.g. vim **<TAB>
_fzf_complete_vim() {
  _fzf_complete --multi --reverse --prompt="vim> " -- "$@" < <(
      cat ~/.viminfo | grep '^>' | sed 's/^> //'
  )
}


#--- Function for quickly uploading/receiving a file from my server.
get(){
	rsync root@azuwaterloo.com:/var/Documents/$1 .
}

send(){
	rsync $1 root@azuwaterloo.com:/var/Documents/
}

#-- PMATH directories

defn(){
						cat $(find ~/pmath-dictionary/definitions | grep "...$1")
}

defn-f(){
    cat "$(find ~/pmath-dictionary/definitions | fzf --height 40% --reverse --inline-info --tac)"
}

thrm(){
						cat $(find ~/pmath-dictionary/theorems | grep "...$1")
}

thrm-f(){
    cat "$(find ~/pmath-dictionary/theorems | fzf --height 40% --reverse --inline-info --tac)"
}

proof(){
						cat $(find ~/pmath-dictionary/proofs | grep "...$1")
}

proof-f(){
    cat "$(find ~/pmath-dictionary/proofs | fzf --height 40% --reverse --inline-info --tac)"
}


#-- Start fzf from home directory
export FZF_DEFAULT_COMMAND="fdfind . $HOME"

LS_COLORS='rs=0:di=01;32:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:';
export LS_COLORS

